// not unique
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        for (int i=0; i<nums.length; i++) {
            for (int j=i+1; j<nums.length; j++) {
                for (int k=j+1; k<nums.length; k++) {
                    if (nums[i] + nums[j] + nums[k] == 0) {
                        List<Integer> list = new ArrayList<>();
                        list.add(nums[i]);
                        list.add(nums[j]);
                        list.add(nums[k]);
                        result.add(list);
                    }
                }
            }
        }
        return result;
    }
}

class Solution {
    List<List<Integer>> result = new ArrayList<List<Integer>>();
    public List<List<Integer>> threeSum(int[] nums) {
        if (nums.length < 3) {
            return result;
        }
        Arrays.sort(nums);
        for (int i=0; i<nums.length; i++) {
            twoSum(nums, i);
        }
        return result;
    }
    
    public void twoSum(int[] nums, int index) {
        HashSet<Integer> set = new HashSet<>();
        for (int i=index+1; i<nums.length; i++) {
            int num = -nums[index] - nums[i];
            if (set.contains(num)) {
                result.add(Arrays.asList(nums[i], nums[index], num));
            }
            set.add(nums[i]);
        }
    }
}

// unique
class Solution {
    List<List<Integer>> result = new ArrayList<List<Integer>>();
    public List<List<Integer>> threeSum(int[] nums) {
        if (nums.length < 3) {
            return result;
        }
        Arrays.sort(nums);
        for (int i=0; i<nums.length; i++) {
            if (i == 0 || nums[i-1] != nums[i])
            twoSum(nums, i);
        }
        return result;
    }
    
    public void twoSum(int[] nums, int index) {
        HashSet<Integer> set = new HashSet<>();
        for (int i=index+1; i<nums.length; i++) {
            int num = -nums[index] - nums[i];
            if (set.contains(num)) {
                result.add(Arrays.asList(nums[i], nums[index], num));
                while (i+1<nums.length && nums[i] == nums[i+1]) {
                    i++;
                }
            }
            set.add(nums[i]);
        }
    }
}

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Set<List<Integer>> result = new HashSet<>();
        if (nums.length < 3) {
            return new ArrayList<>(result);
        }
        Arrays.sort(nums);
        for (int i=0; i<nums.length-2; i++) {
            int j = i+1;
            int k = nums.length-1;
            while (j<k) {
                int sum = nums[j] + nums[k];
                if (nums[i] == sum*-1) {
                    result.add(Arrays.asList(nums[i], nums[j], nums[k]));
                    j++;
                    k--;
                } else if (sum > -nums[i]) {
                    k--;
                } else if (sum < -nums[i]) {
                    j++;
                }
            }
        }
        return new ArrayList<>(result);
    }
}
