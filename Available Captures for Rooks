class Solution {
    public int numRookCaptures(char[][] board) {
        int[] rook = new int[2];
        for (int i=0; i<8; i++) {
            for (int j=0; j<8; j++) {
                if (board[i][j]=='R') {
                    rook[0] = i;
                    rook[1] = j;
                }
            }
        }
        
        return left(board, rook) + right(board, rook) + up(board, rook) + down(board, rook);
    }
    
    public int left(char[][] board, int[] position) {
        int i = position[0];
		for (int j=position[1]; j>0; j--) {
			if (board[i][j]=='B')
				return 0;
			if (board[i][j]=='p')
				return 1;
		}
		return 0;
    }
    
    public int right(char[][] board, int[] position) {
        int i = position[0];
        for (int j=position[1]; j<8; j++) {
        	if (board[i][j]=='B')
        		return 0;
        	if (board[i][j]=='p')
        		return 1;
        }
		return 0;
    }
    
    public int up(char[][] board, int[] position) {
        int j = position[1];
		for (int i=position[0]; i>=0; i--) {
			if (board[i][j]=='B')
				return 0;
			if (board[i][j]=='p')
				return 1;
		}
		return 0;
    }
    
    public int down(char[][] board, int[] position) {
        int j = position[1];
		for (int i=position[0]; i<8; i++) {
			if (board[i][j]=='B')
				return 0;
			if (board[i][j]=='p')
				return 1;
		}
		return 0;
    }
}
