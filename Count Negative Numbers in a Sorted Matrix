class Solution {
    public int countNegatives(int[][] grid) {
        int count = 0;
        for (int i=0; i<grid.length; i++) {
            for (int j=0; j<grid[i].length; j++) {
                if (grid[i][j] < 0) {
                    count++;
                }
            }
        }
        return count;
    }
}

class Solution {
    public int countNegatives(int[][] grid) {
        int count = 0;
        for (int i=0; i<grid.length; i++) {
            for (int j=grid[i].length - 1; j>=0; j--) {
                if (grid[i][j] < 0) {
                    count++;
                } else {
                    break;
                }
            }
        }
        return count;
    }
}

class Solution {
    int count = 0;
    
    public int countNegatives(int[][] grid) {
        for (int i=0; i<grid.length; i++) {
            if (grid[i][0] < 0) {
                count = count + grid[i].length;
            } else {
                binarySearch(grid[i]);
            }
        }
        return count;
    }
    
    public void binarySearch(int[] arr) {
        int low = 0;
        int high = arr.length - 1;
        while (low <= high) {
             int mid = low + (high - low) / 2;
            if (arr[mid] < 0) {
                count = count + high - mid + 1;
                high = mid - 1;
            } else if (arr[mid] >= 0) {
                low = mid + 1;
            }
        }
    }
}
