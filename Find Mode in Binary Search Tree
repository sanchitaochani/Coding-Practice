/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    HashMap<Integer, Integer> count = new HashMap<>();
    public int[] findMode(TreeNode root) {
        if (root == null)
            return new int[0];
        if (root.left == null && root.right == null) {
            int[] arr = {root.val};
            return arr;
        }
        dfs(root);
        List<Integer> temp = new ArrayList<>();
        int max = Collections.max(count.values());
        for (int i: count.keySet()) {
            if (count.get(i)>=max)
                temp.add(i);
        }
        int[] arr = new int[temp.size()];
        for (int i=0; i<temp.size(); i++) {
            arr[i] = temp.get(i);
        }
        return arr;
    }
    
    public void dfs(TreeNode node) {
        count.put(node.val, count.getOrDefault(node.val, 0)+1);
        System.out.print(count.get(node.val));
        if (node.left != null)
            dfs(node.left);
        if (node.right != null)
            dfs(node.right);
    }
}

class Solution {
    HashMap<Integer, Integer> values = new HashMap<>();
    public int[] findMode(TreeNode root) {
        if (root == null) {
            return new int[0];
        }
        traverse(root);
        List<Integer> arr = new ArrayList<>();
        int max = 0;
        for (Integer val : values.keySet()) {
            if (values.get(val) > max) {
                max = values.get(val);
                arr.clear();
            } else if (max > values.get(val)) {
                continue;
            }
            arr.add(val);
        }
        int[] result = new int[arr.size()];
        for (int i=0; i<arr.size(); i++) {
            result[i] = arr.get(i);
        }
        return result;
    }
    
    public void traverse(TreeNode node) {
        if (node == null) {
            return;
        }
        values.put(node.val, values.getOrDefault(node.val, 0) + 1);
        if (node.left != null) {
            traverse(node.left);
        }
        if (node.right != null) {
            traverse(node.right);
        }
    }
}
