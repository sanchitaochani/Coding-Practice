class LRUCache extends LinkedHashMap<Integer, Integer> {

    int capacity;
    public LRUCache(int capacity) {
        super(capacity, 0.75F, true);
        this.capacity = capacity;
    }
    
    public int get(int key) {
        return super.getOrDefault(key, -1);
    }
    
    public void put(int key, int value) {
        super.put(key, value);
    }
    
    @Override
    protected boolean removeEldestEntry(Map.Entry<Integer, Integer> eldest) {
        return size() > capacity; 
    }
}

class LRUCache {

    Map<Integer, Node> map = new HashMap<>();
    Node tail;
    Node head;
    int capacity;
    
    
    public LRUCache(int capacity) {
        this.capacity = capacity;
        tail = new Node(0,0);
        head = new Node(0,0);
        tail.prev = head;
        head.next = tail;
    }
    
    public int get(int key) {
        Node node = map.get(key);
        if (node == null) {
            return -1;
        }
        delete(node);
        insert(node);
        return node.value;
    }
    
    public void put(int key, int value) {
        if (map.containsKey(key)) {
            delete(map.get(key));
        }
        if (map.size() == capacity) {
            delete(tail.prev);
        }
        insert(new Node(key, value));
    }
    
    public void insert(Node node) {
        map.put(node.key, node);
        node.next = head.next;
        head.next.prev = node;
        node.prev = head;
        head.next = node;
    }
    
    public void delete(Node node) {
        map.remove(node.key);
        node.prev.next = node.next;
        node.next.prev = node.prev;
    }
}

class Node {
    int key;
    int value;
    Node next;
    Node prev;
    
    Node(int key, int value) {
        this.key = key;
        this.value = value;
    }
}
