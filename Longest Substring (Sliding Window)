public class Solution {
    public int lengthOfLongestSubstring(String s) {
        Set<Character> set = new HashSet<>();
        int len = 0, i = 0, j = 0, ans = 0;
        while (i < s.length() && j < s.length()) {
            if (!set.contains(s.charAt(j))){
                set.add(s.charAt(j++));
                ans = Math.max(ans, j - i);
            }
            else {
                set.remove(s.charAt(i++));
            }
        }
        return ans;
    }
}

class Solution {
    public int lengthOfLongestSubstring(String s) {
        List<List<String>> result = new ArrayList<List<String>>();
        int i=0, j=0;
        int max = 0;
        while (j < s.length()) {
            List<String> list = new ArrayList<>();
            StringBuilder sb = new StringBuilder();
            i = j;
            while (i < s.length() && sb.indexOf(s.charAt(i) + "") == -1) {
                sb.append(s.charAt(i));
                i++;
            }
            list.add(sb.toString());
            max = Math.max(max, sb.length());
            j++;
        }
        return max;
    }
}
