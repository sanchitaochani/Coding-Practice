// Sliding window
class Solution {
    public int maxScore(int[] cardPoints, int k) {
        int maxSum = 0;
        int windowSum = 0;
        int len = cardPoints.length;
        for (int i=0, j=0; i<len; i++) {
            maxSum += cardPoints[i];
            if (j < len - k) {
                windowSum += cardPoints[j++];
            }
        }
        int p1 = 0;
        int p2 = len - k;
        int result = Math.max(0, maxSum - windowSum);
        while (p2 < len) {
            windowSum -= cardPoints[p1++];
            windowSum += cardPoints[p2++];
            result = Math.max(maxSum - windowSum, result);
        }
        
        return result;
    }
}

class Solution {
    public int maxScore(int[] cardPoints, int k) {
        int len = cardPoints.length;
        int leftSum = 0; 
        int rightSum = 0;
        for(int i=0; i < k; i++) {
            leftSum += cardPoints[i];
        }
        int max = leftSum;
        int i = 0;
        while (i < k) {
            rightSum += cardPoints[len- 1 - i]; 
            leftSum -= cardPoints[k-i-1];
            max = Math.max(max, leftSum + rightSum);
            i++;
        }
        return max;
    }
}
