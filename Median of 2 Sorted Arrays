class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int[] arr = new int[nums1.length+nums2.length];
        int index = 0;
        while (index < nums1.length) {
            arr[index] = nums1[index];
            index++;
        }
        int i = 0;
        while (i < nums2.length) {
            arr[index] = nums2[i];
            index++;
            i++;
        }
        Arrays.sort(arr);
        if (arr.length % 2 == 1) {
            return 1.0 * arr[arr.length/2];
        } else {
            int mid = arr.length/2;
            return 1.0 * (arr[mid] + arr[mid-1]) / 2;
        }
    }
}

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m = nums1.length < nums2.length ? nums1.length : nums2.length;
        int n = nums1.length > nums2.length ? nums1.length : nums2.length;
        if (nums2.length < nums1.length) {
            int[] temp = nums1; 
            nums1 = nums2;
            nums2 = temp;
        }
        int left = 0, right = m;
        int mid = (m + n + 1)  / 2;
        while (left <= right) {
            int i = (left + right) / 2;
            int j = mid - i;
            if (i < right && nums2[j-1] > nums1[i]) {
                left = i + 1;
            } else if (i > left && nums1[i-1] > nums2[j]) {
                right = i - 1;
            } else {
                int maxLeft = 0;
                if (i == 0) {
                    maxLeft = nums2[j-1];
                } else if (j == 0) {
                    maxLeft = nums1[i-1];
                } else {
                    maxLeft = Math.max(nums1[i-1], nums2[j-1]);
                }
                if ((m + n) % 2 == 1) {
                    return maxLeft;
                }
                
                int minRight = 0;
                if (i == m) {
                    minRight = nums2[j];
                } else if (j == n) {
                    minRight = nums1[i];
                } else {
                    minRight = Math.min(nums1[i], nums2[j]);
                }
                
                return 1.0 * (minRight + maxLeft) / 2;
            }
        }
        return 0.0;
    }
}
