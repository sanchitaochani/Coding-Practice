class Solution {
    public int minMeetingRooms(int[][] intervals) {
        if (intervals.length == 0) {
            return 0;
        }
        Arrays.sort(intervals, new Comparator<int[]>() {
            public int compare(int[] a, int[] b) {
                if (a[0] > b[0]) 
                    return 1; 
                else
                    return -1;
            }
        });
        Queue<Integer> queue = new PriorityQueue<>();
        for (int i=0; i<intervals.length; i++) {
            if (queue.size() == 0) {
                queue.add(intervals[i][1]);
            } else {
                if (intervals[i][0] < queue.peek()) {
                    queue.add(intervals[i][1]);
                } else {
                    queue.poll();
                    queue.add(intervals[i][1]);
                }
            }
        }
        return queue.size();
    }
}
