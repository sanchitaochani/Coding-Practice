class Solution {
    public int minMoves(int[] nums) {
        int max = nums.length-1, min = 0;
        int count = 0;
        while (true) {
            for (int i=0; i<nums.length; i++) {
                if (nums[max] < nums[i]) {
                    max = i;
                } 
                if (nums[i] < nums[min]) {
                    min = i;
                }
            }
            if (nums[min] == nums[max]) {
                break;
            }
            for (int i=0; i<nums.length; i++) {
                if (i != max) {
                    nums[i]++;
                }
            }
            count++;
        }
        return count;
    }
}

class Solution {
    public int minMoves(int[] nums) {
        int max = nums.length-1, min = 0;
        int count = 0;
        while (true) {
            for (int i=0; i<nums.length; i++) {
                if (nums[max] < nums[i]) {
                    max = i;
                } 
                if (nums[i] < nums[min]) {
                    min = i;
                }
            }
            if (nums[min] == nums[max]) {
                break;
            }
            int diff = nums[max] - nums[min];
            count += diff;
            for (int i=0; i<nums.length; i++) {
                if (i != max) {
                    nums[i] += diff;
                }
            }
        }
        return count;
    }
}

class Solution {
    public int minMoves(int[] nums) {
        Arrays.sort(nums);
        int count = 0;
        for (int i=nums.length-1; i>0; i--) {
            count += nums[i] - nums[0];
        }
        return count;
    }
}

class Solution {
    public int minMoves(int[] nums) {
        int count = 0;
        int min = Integer.MAX_VALUE;
        for (int i=0; i<nums.length; i++) {
            min = Math.min(nums[i], min);
        }
        for (int i=0; i<nums.length; i++) {
            count += nums[i] - min;
        }
        return count;
    }
}
