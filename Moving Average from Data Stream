class MovingAverage {

    int size;
    List<Integer> queue = new ArrayList<Integer>();
    
    public MovingAverage(int size) {
        this.size = size;
    }
    
    public double next(int val) {
        queue.add(val);
        double sum = 0;
        int i = Math.max(0, queue.size() - size);
        while (i<queue.size()) {
            sum = sum + queue.get(i);
            i++;
        }
        
        return sum / Math.min(size, queue.size());
    }
}

class MovingAverage {

    int size;
    int sum = 0;
    int count = 0;
    Deque<Integer> queue = new ArrayDeque<Integer>();

    public MovingAverage(int size) {
        this.size = size;
    }
    
    public double next(int val) {
        queue.add(val);
        count++;
        int tail = count > size ? queue.poll() : 0;
        sum = sum - tail + val;
        
        return sum * 1.0 / Math.min(size, count);
    }
}
