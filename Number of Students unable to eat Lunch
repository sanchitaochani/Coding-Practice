class Solution {
    public int countStudents(int[] students, int[] sandwiches) {
        Stack<Integer> stack = new Stack<>();
        Queue<Integer> queue = new LinkedList<>();
        for (int i=0, j=sandwiches.length-1; i<students.length; i++, j--) {
            stack.push(sandwiches[j]);
            queue.add(students[i]);
        }
        while (!queue.isEmpty()) {
            if (stack.peek() == queue.peek()) {
                stack.pop();
                queue.poll();
            }
            else if (stack.peek() != queue.peek()) {
                queue.add(queue.poll());
            }
            if (stack.isEmpty() || !queue.contains(stack.peek())) {
                break;
            }
        }
        return queue.size();
    }
}

class Solution {
    public int countStudents(int[] students, int[] sandwiches) {
        int[] prefer = new int[2];
        for (int i=0; i<students.length; i++) {
            prefer[students[i]]++;
        }
        int studentsWhoAte = 0;
        for (int i=0; i<sandwiches.length; i++) {
            if (prefer[sandwiches[i]] == 0) {
                break;
            } else {
                prefer[sandwiches[i]]--;
                studentsWhoAte++;
            }
        }
        return students.length - studentsWhoAte;
    }
}
