class Solution {
    boolean result = false;
    public boolean hasPathSum(TreeNode root, int sum) {
        int[] nodes = new int[100];
		return helper(nodes, root, 0, sum);
    }
    
    private boolean helper(int[] nodes, TreeNode node, int len, int val) {
        
		if (node==null)
			return false;
		nodes[len] = node.val;
        len++;
		if (node.left == null && node.right == null) {
			int sum = calculateSum(nodes, len);
            if (sum==val) {
                result = true;
                return result;
            }
		}
		else {
			helper(nodes, node.left, len, val);
			helper(nodes, node.right, len, val);
		}
		
        return result;
	}
    
    private int calculateSum(int[] nodes, int len) {
		int sum = 0;
		for (int i=0; i<len; i++) {
			sum = sum + nodes[i];
		}
		return sum;
	}
}


class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        if (root == null) {
            return false;
        }
        if (root.val == targetSum && root.left == null && root.right == null) {
            return true;
        }
        int sum = root.val;
        return helper(root, targetSum, sum);
    }
    
    public boolean helper(TreeNode node, int targetSum, int currSum) {
        if (node.left == null && node.right == null) {
            if (currSum == targetSum) {
                return true;
            } else {
                return false;
            }
        }
        boolean b1 = false, b2 = false;
        if (node.left != null) {
            currSum += node.left.val;
            b1 = helper(node.left, targetSum, currSum);
            currSum -= node.left.val;
        }
        if (node.right != null) {
            currSum += node.right.val;
            b2 = helper(node.right, targetSum, currSum);
            currSum -= node.right.val;
        }
        return b1 || b2;
    }
}
