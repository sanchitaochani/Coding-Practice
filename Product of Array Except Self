class Solution {
    public int[] productExceptSelf(int[] nums) {
        int[] result = new int[nums.length];
        for (int i=0; i<nums.length; i++) {
            int product = 1;
            for (int j=0; j<nums.length; j++) {
                if (i != j) {
                    product = product * nums[j];
                }
            }
            result[i] = product;
        }
        return result;
    }
}

// doesn't handle edge case where nums[i] is zero
class Solution {
    public int[] productExceptSelf(int[] nums) {
        int[] result = new int[nums.length];
        int product = 1;
        for (int i=0; i<nums.length; i++) {
            product = product * nums[i];
        }
        for(int i=0; i<nums.length; i++) {
            result[i] = product / nums[i];
        }
        return result;
    }
}

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int len = nums.length;
        int[] left = new int[len];
        int[] right = new int[len];
        int[] result = new int[len];
        left[0] = 1;
        for (int i=1; i<len; i++) {
            left[i] = left[i-1] * nums[i-1];
        }
        right[len-1] = 1;
        for (int i=len-2; i>=0; i--) {
            right[i] = right[i+1] * nums[i+1];
        }
        for (int i=0; i<len; i++) {
            result[i] = left[i] * right[i];
        }
        return result;
    }
}
