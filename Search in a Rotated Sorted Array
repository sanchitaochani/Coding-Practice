class Solution {
    public int search(int[] nums, int target) {
        int result = 0;
        int i = 1;
        while (i < nums.length) {
            if (nums[i-1] > nums[i]) {
                int result1 = binarySearch(nums, 0, i-1, target);
                if (result1 != -1) {
                    return result1;
                }
                int result2 = binarySearch(nums, i, nums.length-1, target);
                if (result2 != -1) {
                    return result2;
                }
                break;
            } else {
                i++;
            }
        }
        return binarySearch(nums, 0, nums.length-1, target);
    }
    
    public int binarySearch(int[] nums, int low, int high, int target) {
        if (high >= low) {
            int mid = low + (high - low) / 2;
            if (target == nums[mid]) {
                return mid;
            } 
            if (target < nums[mid]) {
                return binarySearch(nums, low, mid-1, target);
            } else {
                return binarySearch(nums, mid+1, high, target);
            }
        }
        
        return -1;
    }
}

class Solution {
    public int search(int[] nums, int target) {
        int low = 0;
        int high = nums.length - 1;
        while (low <= high) {
            int mid = low + (high-low) / 2;
            if (nums[mid] == target) {
                return mid;
            }
            if (nums[low] <= nums[mid]) {
                if (target >= nums[low] && target < nums[mid]) {
                    high = mid - 1;
                } else {
                    low = mid + 1;
                }
            } else {
                if (target > nums[mid] && target <= nums[high]) {
                    low = mid + 1;
                } else {
                    high = mid - 1;
                }
            }
        }
        return -1;
    }
}
