class Solution {
    public boolean selfDividing(int n) {
        int temp = n;
            while(temp>0) {
                int digit = temp % 10;
                if (digit == 0)
                    return false;
                if (n%digit != 0)
                    return false;
                temp = temp / 10;
            }
            return true;
    }
    
    public List<Integer> selfDividingNumbers(int left, int right) {
        List<Integer> result = new ArrayList<Integer>();
        for (int i=left; i<=right; i++) {
            if (selfDividing(i))
                result.add(i);
        }
        return result;
    }
}
        
    
class Solution {
    public List<Integer> selfDividingNumbers(int left, int right) {
        List<Integer> result = new ArrayList<>();
        while (left < 10) {
            result.add(left++);
        }
        while (left <= right) {
            if (isSelfDividing(left)) {
                result.add(left);
            }
            left++;
        }
        return result;
    }
    
    public boolean isSelfDividing(int num) {
        int temp = num;
        while (temp > 0) {
            int digit = temp % 10;
            if (digit == 0) {
                return false;
            }
            if (num % digit != 0) {
                return false;
            }
            temp = temp / 10;
        }
        return true;
    }
}
