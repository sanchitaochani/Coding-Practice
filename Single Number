import java.util.*;
class Solution {
    public int singleNumber(int[] nums) {
        if (nums.length==1)
            return nums[0];
        Hashtable<Integer, Integer> ht = new Hashtable<>();
        int count = 0;
        for (int i=0; i<nums.length; i++) {
            if (ht.containsKey(nums[i]))
                ht.remove(nums[i]);
            else
                ht.put(nums[i], i);
        }
        
        return (int)ht.keySet().toArray()[0];
    }
}

class Solution {
    public int singleNumber(int[] nums) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i=0; i<nums.length; i++) {
            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
        }
        for (Map.Entry<Integer, Integer> entry: map.entrySet()) {
            if (entry.getValue() == 1) {
                return entry.getKey();
            }
        }
        return 0;
    }
}

class Solution {
    public int singleNumber(int[] nums) {
        ArrayList<Integer> count = new ArrayList<>();
        for (int i=0; i<nums.length; i++) {
            if (!count.contains(nums[i])) {
                count.add(nums[i]);
            } else {
                count.remove(new Integer(nums[i]));
            }
        }
        return count.get(0);
    }
}

class Solution {
    public int singleNumber(int[] nums) {
        int sumOfSet = 0, sumOfNums = 0;
        Set<Integer> set = new HashSet();

        for (int i=0; i<nums.length; i++) {
          if (!set.contains(nums[i])) {
            set.add(nums[i]);
            sumOfSet += nums[i];
          }
          sumOfNums += nums[i];
        }
        return 2 * sumOfSet - sumOfNums;
    }
}
