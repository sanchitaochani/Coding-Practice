class Solution {
    public List<List<Integer>> getSkyline(int[][] buildings) {
        int[][] arr = new int[buildings.length*2][2];
        int j = 0;
        for (int i=0; i<buildings.length; i++) {
            arr[j] = new int[] {buildings[i][0], buildings[i][2]};
            j++;
            arr[j] = new int[] {buildings[i][1], buildings[i][2]};
            j++;
        }
        Arrays.sort(arr, new Comparator<int[]>() {
            public int compare(int[] a, int[] b) {
                return Integer.compare(a[0], b[0]);
            }
        });
        Queue<Integer> queue = new PriorityQueue<>(Collections.reverseOrder());
        queue.add(0);
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        int prevMax = 0;
        for (int[] b : arr) {
            if (queue.contains(b[1])) {
                queue.remove(b[1]);
            } else {
                queue.add(b[1]);
            }
            int currMax = queue.peek();
            if (prevMax != currMax) {
                    result.add(new ArrayList<>(Arrays.asList(b[0], currMax)));
                prevMax = currMax;
             }
        }
        return result;
    }
}
