class Solution {
    public int trap(int[] height) {
        int result = 0;
        for (int i=0; i<height.length; i++) {
            int leftMax = 0, rightMax = 0;
            for (int j=i; j>=0; j--) {
                leftMax = Math.max(leftMax, height[j]);
            }
            for (int j=i; j<height.length; j++) {
                rightMax = Math.max(rightMax, height[j]);
            }
            result = result + Math.min(leftMax, rightMax) - height[i];
        }
        return result;
    }
}

class Solution {
    public int trap(int[] height) {
        if (height.length == 0) {
            return 0;
        }
        int result = 0;
        int[] leftMax = new int[height.length];
        int[] rightMax = new int[height.length];
        
        leftMax[0] = height[0];
        for (int i=1; i<height.length; i++) {
            leftMax[i] = Math.max(height[i], leftMax[i-1]);
        }
        rightMax[height.length - 1] = height[height.length - 1];
        for (int i=height.length-2; i>=0; i--) {
            rightMax[i] = Math.max(height[i], rightMax[i+1]);
        }
        for (int i=0; i<height.length; i++) {
            result = result + Math.min(leftMax[i], rightMax[i]) - height[i];
        }
        return result;
    }
}

class Solution {
    public int trap(int[] height) {
        int result = 0;
        Stack<Integer> stack = new Stack<>();
        int pointer = 0;
        
        while (pointer < height.length) {
            while (!stack.isEmpty() && height[pointer] > height[stack.peek()]) {
                int top = stack.peek();
                stack.pop();
                if (stack.isEmpty()) {
                    break;
                }
                int distance = pointer - stack.peek() - 1;
                int ht = Math.min(height[pointer], height[stack.peek()]) - height[top];
                result += distance * ht;
            }
            stack.push(pointer++);
        }
        return result;
    }
}

class Solution {
    public int trap(int[] height) {
        int result = 0;
        int p1 = 0, p2 = height.length - 1;
        int leftMax = 0, rightMax = 0;
        
        while (p1 < p2) {
            if (height[p1] < height[p2]) {
                if (height[p1] >= leftMax) {
                    leftMax = height[p1++];
                } else {
                    result += leftMax - height[p1++];
                }
            } else {
                if (height[p2] >= rightMax) {
                    rightMax = height[p2--];
                } else {
                    result += rightMax - height[p2--];
                }
            }
        }
        return result;
    }
}
