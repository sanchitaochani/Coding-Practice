class Solution {
    public boolean validPalindrome(String s) {
        if (isPalindrome(s)) {
            return true;
        } else {
            StringBuilder sb = new StringBuilder(s);
            for (int i=0; i<sb.length(); i++) {
                char ch = sb.charAt(i);
                sb.deleteCharAt(i);
                if (isPalindrome(sb.toString())) {
                    return true;
                }
                sb.insert(i, ch);
            }
        }
        return false;
    }
    
    public boolean isPalindrome(String s) {
        int i=0, j=s.length()-1;
        while (i<s.length()/2) {
            if (s.charAt(i) != s.charAt(j)) {
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
    
}

class Solution {
    public boolean validPalindrome(String s) {
        int j=s.length()-1;
        for (int i=0; i<s.length()/2; i++) {
            if (s.charAt(i) != s.charAt(j)) {
                int k = j;
                return isPalindrome(s, i+1, k) || isPalindrome(s, i, k-1);
            }
            j--;
        }
        return true;
    }
    
    public boolean isPalindrome(String s, int i, int j) {
        int k=i;
        while (k <= i+(j-i)/2) {
            if (s.charAt(k) != s.charAt(j-k+i)) {
                return false;
            }
            k++;
        }
        return true;
    }
    
}
