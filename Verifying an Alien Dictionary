class Solution {
    public boolean isAlienSorted(String[] words, String order) {
        int[] index = new int[26];
        for (int i=0; i<order.length(); i++) {
            index[order.charAt(i) - 'a'] = i;
        }
        search: for (int i=0; i<words.length-1; i++) {
            String word1 = words[i];
            String word2 = words[i+1];
            for (int k = 0; k<Math.min(word1.length(), word2.length()); k++) {
                char ch1 = word1.charAt(k);
                char ch2 = word2.charAt(k);
                if (ch1 != ch2) {
                    if (index[ch1 - 'a'] > index[ch2 - 'a']) {
                        return false;
                    }
                    continue search;
                }
            }
            
            if (word1.length() > word2.length()) {
                return false;
            }
        }
        return true;
    }
}

class Solution {
    int[] index = new int[26];
    public boolean isAlienSorted(String[] words, String order) {
        for (int i=0; i<order.length(); i++) {
            index[order.charAt(i) - 'a'] = i;
        }
        for (int i=0; i<words.length-1; i++) {
            String word1 = words[i];
            String word2 = words[i+1];
            if ((compare(word1, word2)) > 0) {
                return false;
            }
        }
        return true;
    }
    
    public int compare(String s1, String s2) {
        int i = 0;
        int j = 0;
        int res = 0;
        while (i < s1.length() && j < s2.length() && res == 0) {
            res = index[s1.charAt(i) - 'a'] - index[s2.charAt(j) - 'a'];
            i++;
            j++;
        }
        if (res == 0) {
            return s1.length() - s2.length();
        } else {
            return res;
        }
    }
}
