class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        if (!wordList.contains(endWord)) {
            return 0;
        }
        HashMap<String, Boolean> map = new HashMap<>();
        for (String word: wordList) {
            map.put(word, false);
        }
        Queue<String> queue = new LinkedList<>();
        int result = 1;
        queue.add(beginWord);
        map.put(beginWord, true);
        while (!queue.isEmpty()) {
            for (int i=0; i<queue.size(); i++) {
                String word = queue.poll();
                if (word.equals(endWord)) {
                    return result;
                }
                helper(word, map, queue);
            }
            result++;
        }
        return 0;
    }
    
    public void helper(String word, HashMap<String, Boolean> map, Queue<String> queue) {
        for (int i=0; i<word.length(); i++) {
            char[] arr = word.toCharArray();
            for (char ch='a'; ch<='z'; ch++) {
                arr[i] = ch;
                String temp = String.valueOf(arr);
                if (map.containsKey(temp) && map.get(temp) == false) {
                    queue.add(temp);
                    map.put(temp, true);
                }
            }
        }
    }
}
